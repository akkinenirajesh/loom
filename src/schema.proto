import "distributions/io/schema.proto";

package protobuf.loom;

//----------------------------------------------------------------------------
// Products

message ProductModel {
  message Shared {
    required distributions.Clustering clustering = 1;
    repeated distributions.BetaBernoulli.Shared bb = 2;
    repeated distributions.DirichletDiscrete.Shared dd = 3; // ordered by increasing dim
    repeated distributions.DirichletProcessDiscrete.Shared dpd = 4;
    repeated distributions.GammaPoisson.Shared gp = 5;
    repeated distributions.NormalInverseChiSq.Shared nich = 6;
  }

  message HyperPrior {
    repeated distributions.Clustering clustering = 1;
    required distributions.BetaBernoulli.GridPrior bb = 2;
    required distributions.DirichletDiscrete.GridPrior dd = 3;
    required distributions.DirichletProcessDiscrete.GridPrior dpd = 4;
    required distributions.GammaPoisson.GridPrior gp = 5;
    required distributions.NormalInverseChiSq.GridPrior nich = 6;
  }

  message SparseValue {
    repeated bool observed = 1;
    repeated bool booleans = 2;  // including bb
    repeated uint32 counts = 3;  // including dd, dpd, gp
    repeated float reals = 4;  // including nich
  }

  message Group {
    required uint64 count = 1;
    repeated distributions.BetaBernoulli.Group bb = 2;
    repeated distributions.DirichletDiscrete.Group dd = 3;
    repeated distributions.DirichletProcessDiscrete.Group dpd = 4;
    repeated distributions.GammaPoisson.Group gp = 5;
    repeated distributions.NormalInverseChiSq.Group nich = 6;
  }
}

//----------------------------------------------------------------------------
// CrossCat

message CrossCat {
  message Kind {
    required ProductModel.Shared product_model = 1;
    repeated uint32 featureids = 2;
  }

  message HyperPrior {
    required ProductModel.HyperPrior inner_prior = 1;
    repeated distributions.Clustering outer_prior = 2;
  }

  repeated Kind kinds = 1;
  required distributions.Clustering feature_clustering = 2;
  repeated uint32 featureid_to_kindid = 3;
  optional HyperPrior hyper_prior = 4;
}

message SparseRow {
  required uint64 id = 1;
  required ProductModel.SparseValue data = 2;
}

message Assignment {
  required uint64 rowid = 1;
  repeated uint32 groupids = 2;
}

message PosteriorEnum {
  message Kind {
    repeated uint32 groupids = 1;
  }
  message Sample {
    repeated uint32 featureid_to_kindid = 1;
    repeated Kind kinds = 2;
  }
}

//----------------------------------------------------------------------------
// PreQL

message PreQL {
  message Predict {
    message Query {
      required string id = 1;
      required ProductModel.SparseValue data = 2;
      repeated bool to_predict = 3;
      required uint32 sample_count = 4;
    }
    message Result {
      required string id = 1;
      optional string error = 2;
      repeated ProductModel.SparseValue samples = 3;
    }
  }
}
