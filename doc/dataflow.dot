// this file was generated by loom/documented.py
digraph G {
  overlap=false;
  graph [fontname = "helvetica"];
  node [fontname = "helvetica"];
  edge [fontname = "helvetica"];

  // data
  {
    node [shape=Mrecord];
    //node [shape=plaintext];
    consensus_assign [label=<<FONT POINT-SIZE="18">consensus.assign</FONT><BR/><FONT POINT-SIZE="12">consensus/assign.pbs.gz</FONT>>];
    consensus_groups [label=<<FONT POINT-SIZE="18">consensus.groups</FONT><BR/><FONT POINT-SIZE="12">consensus/groups</FONT>>];
    consensus_model [label=<<FONT POINT-SIZE="18">consensus.model</FONT><BR/><FONT POINT-SIZE="12">consensus/model.pb.gz</FONT>>];
    ingest_diffs [label=<<FONT POINT-SIZE="18">ingest.diffs</FONT><BR/><FONT POINT-SIZE="12">ingest/diffs.pbs.gz</FONT>>];
    ingest_encoding [label=<<FONT POINT-SIZE="18">ingest.encoding</FONT><BR/><FONT POINT-SIZE="12">ingest/encoding.json.gz</FONT>>];
    ingest_rows [label=<<FONT POINT-SIZE="18">ingest.rows</FONT><BR/><FONT POINT-SIZE="12">ingest/rows.pbs.gz</FONT>>];
    ingest_rows_csv [label=<<FONT POINT-SIZE="18">ingest.rows_csv</FONT><BR/><FONT POINT-SIZE="12">ingest/rows_csv</FONT>>];
    ingest_schema [label=<<FONT POINT-SIZE="18">ingest.schema</FONT><BR/><FONT POINT-SIZE="12">ingest/schema.json.gz</FONT>>];
    ingest_schema_row [label=<<FONT POINT-SIZE="18">ingest.schema_row</FONT><BR/><FONT POINT-SIZE="12">ingest/schema.pb.gz</FONT>>];
    ingest_tares [label=<<FONT POINT-SIZE="18">ingest.tares</FONT><BR/><FONT POINT-SIZE="12">ingest/tares.pbs.gz</FONT>>];
    samples_0_assign [label=<<FONT POINT-SIZE="18">samples.0.assign</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/assign.pbs.gz</FONT>>];
    samples_0_config [label=<<FONT POINT-SIZE="18">samples.0.config</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/config.pb.gz</FONT>>];
    samples_0_groups [label=<<FONT POINT-SIZE="18">samples.0.groups</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/groups</FONT>>];
    samples_0_infer_log [label=<<FONT POINT-SIZE="18">samples.0.infer_log</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/infer_log.pbs</FONT>>];
    samples_0_init [label=<<FONT POINT-SIZE="18">samples.0.init</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/init.pb.gz</FONT>>];
    samples_0_model [label=<<FONT POINT-SIZE="18">samples.0.model</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/model.pb.gz</FONT>>];
    samples_0_shuffled [label=<<FONT POINT-SIZE="18">samples.0.shuffled</FONT><BR/><FONT POINT-SIZE="12">samples/sample.0/shuffled.pbs.gz</FONT>>];
    seed [label=<<FONT POINT-SIZE="18">seed</FONT>>];
  }

  // transforms
  {
    node [shape=box, style=filled];

    watch [label=<loom.__main__.<BR/><FONT POINT-SIZE="18">watch</FONT>>, fillcolor=pink];
    config_dump [label=<loom.config.<BR/><FONT POINT-SIZE="18">config_dump</FONT>>, fillcolor=pink];
    make_consensus [label=<loom.consensus.<BR/><FONT POINT-SIZE="18">make_consensus</FONT>>, fillcolor=pink];
    import_rows [label=<loom.format.<BR/><FONT POINT-SIZE="18">import_rows</FONT>>, fillcolor=pink];
    make_encoding [label=<loom.format.<BR/><FONT POINT-SIZE="18">make_encoding</FONT>>, fillcolor=pink];
    make_schema_row [label=<loom.format.<BR/><FONT POINT-SIZE="18">make_schema_row</FONT>>, fillcolor=pink];
    generate_init [label=<loom.generate.<BR/><FONT POINT-SIZE="18">generate_init</FONT>>, fillcolor=pink];
    infer [label=<loom.runner.<BR/><FONT POINT-SIZE="18">infer</FONT>>, fillcolor=pink];
    shuffle [label=<loom.runner.<BR/><FONT POINT-SIZE="18">shuffle</FONT>>, fillcolor=pink];
    sparsify [label=<loom.runner.<BR/><FONT POINT-SIZE="18">sparsify</FONT>>, fillcolor=pink];
    tare [label=<loom.runner.<BR/><FONT POINT-SIZE="18">tare</FONT>>, fillcolor=pink];
    query [label=<loom.tasks.<BR/><FONT POINT-SIZE="18">query</FONT>>, fillcolor=pink];

    samples_0_infer_log -> watch [weight=1.0];
    seed -> config_dump [weight=1.0];
    config_dump -> samples_0_config [weight=1.0];
    samples_0_model -> make_consensus [weight=1.0];
    samples_0_groups -> make_consensus [weight=1.0];
    samples_0_assign -> make_consensus [weight=1.0];
    make_consensus -> consensus_model [weight=1.0];
    make_consensus -> consensus_groups [weight=1.0];
    make_consensus -> consensus_assign [weight=1.0];
    ingest_encoding -> import_rows [weight=1.0];
    ingest_rows_csv -> import_rows [weight=1.0];
    import_rows -> ingest_rows [weight=1.0];
    ingest_schema -> make_encoding [weight=1.0];
    ingest_rows_csv -> make_encoding [weight=1.0];
    make_encoding -> ingest_encoding [weight=1.0];
    ingest_schema -> make_schema_row [weight=1.0];
    make_schema_row -> ingest_schema_row [weight=1.0];
    ingest_encoding -> generate_init [weight=1.0];
    seed -> generate_init [weight=1.0];
    generate_init -> samples_0_init [weight=1.0];
    samples_0_config -> infer [weight=1.0];
    samples_0_shuffled -> infer [weight=1.0];
    ingest_tares -> infer [weight=1.0];
    samples_0_init -> infer [weight=1.0];
    infer -> samples_0_model [weight=1.0];
    infer -> samples_0_groups [weight=1.0];
    infer -> samples_0_assign [weight=1.0];
    infer -> samples_0_infer_log [weight=1.0];
    ingest_diffs -> shuffle [weight=1.0];
    seed -> shuffle [weight=1.0];
    shuffle -> samples_0_shuffled [weight=1.0];
    ingest_schema_row -> sparsify [weight=1.0];
    ingest_tares -> sparsify [weight=1.0];
    ingest_rows -> sparsify [weight=1.0];
    sparsify -> ingest_diffs [weight=1.0];
    ingest_schema_row -> tare [weight=1.0];
    ingest_rows -> tare [weight=1.0];
    tare -> ingest_tares [weight=1.0];
    ingest_encoding -> query [weight=1.0];
    samples_0_config -> query [weight=1.0];
    samples_0_model -> query [weight=1.0];
    samples_0_groups -> query [weight=1.0];
  }
}
